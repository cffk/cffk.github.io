// RandomNumber.cpp
//
// http://charles.karney.info/random/

#include "RandomNumber.hpp"

namespace {
  char rcsid[] = "$Id: RandomNumber.cpp 6145 2006-04-26 19:48:43Z ckarney $";
  char h_rcsid[] = RCSID_RANDOMNUMBER_H;
}

/**
 * \file RandomNumber.cpp
 * Code for RandomNumber
 *****************************************************************************/

// Initialize Global with a fixed (simple) seed.

RandomNumber RandomNumber::Global(0);

#if MT_POWERTABLE

// Powers of two.  Just use floats here.  As long as there's no overflow
// or underflow these are exact.  In particular they can be cast to
// doubles or long doubles with no error.
const float RandomNumber::power2[maxpow - minpow + 1] = {
#if MT_LONGDOUBLEPREC > 64
  // It would be nice to be able to use the C99 notation of 0x1.0p-120
  // for 2^-120 here.
  1/1329227995784915872903807060280344576.f, // 2^-120
  1/664613997892457936451903530140172288.f, // 2^-119
  1/332306998946228968225951765070086144.f, // 2^-118
  1/166153499473114484112975882535043072.f, // 2^-117
  1/83076749736557242056487941267521536.f, // 2^-116
  1/41538374868278621028243970633760768.f, // 2^-115
  1/20769187434139310514121985316880384.f, // 2^-114
  1/10384593717069655257060992658440192.f, // 2^-113
  1/5192296858534827628530496329220096.f, // 2^-112
  1/2596148429267413814265248164610048.f, // 2^-111
  1/1298074214633706907132624082305024.f, // 2^-110
  1/649037107316853453566312041152512.f, // 2^-109
  1/324518553658426726783156020576256.f, // 2^-108
  1/162259276829213363391578010288128.f, // 2^-107
  1/81129638414606681695789005144064.f, // 2^-106
  1/40564819207303340847894502572032.f, // 2^-105
  1/20282409603651670423947251286016.f, // 2^-104
  1/10141204801825835211973625643008.f, // 2^-103
  1/5070602400912917605986812821504.f, // 2^-102
  1/2535301200456458802993406410752.f, // 2^-101
  1/1267650600228229401496703205376.f, // 2^-100
  1/633825300114114700748351602688.f, // 2^-99
  1/316912650057057350374175801344.f, // 2^-98
  1/158456325028528675187087900672.f, // 2^-97
  1/79228162514264337593543950336.f, // 2^-96
  1/39614081257132168796771975168.f, // 2^-95
  1/19807040628566084398385987584.f, // 2^-94
  1/9903520314283042199192993792.f, // 2^-93
  1/4951760157141521099596496896.f, // 2^-92
  1/2475880078570760549798248448.f, // 2^-91
  1/1237940039285380274899124224.f, // 2^-90
  1/618970019642690137449562112.f, // 2^-89
  1/309485009821345068724781056.f, // 2^-88
  1/154742504910672534362390528.f, // 2^-87
  1/77371252455336267181195264.f, // 2^-86
  1/38685626227668133590597632.f, // 2^-85
  1/19342813113834066795298816.f, // 2^-84
  1/9671406556917033397649408.f, // 2^-83
  1/4835703278458516698824704.f, // 2^-82
  1/2417851639229258349412352.f, // 2^-81
  1/1208925819614629174706176.f, // 2^-80
  1/604462909807314587353088.f, // 2^-79
  1/302231454903657293676544.f, // 2^-78
  1/151115727451828646838272.f, // 2^-77
  1/75557863725914323419136.f,	// 2^-76
  1/37778931862957161709568.f,	// 2^-75
  1/18889465931478580854784.f,	// 2^-74
  1/9444732965739290427392.f,	// 2^-73
  1/4722366482869645213696.f,	// 2^-72
  1/2361183241434822606848.f,	// 2^-71
  1/1180591620717411303424.f,	// 2^-70
  1/590295810358705651712.f,	// 2^-69
  1/295147905179352825856.f,	// 2^-68
  1/147573952589676412928.f,	// 2^-67
  1/73786976294838206464.f,	// 2^-66
  1/36893488147419103232.f,	// 2^-65
#endif
  1/18446744073709551616.f,	// 2^-64
  1/9223372036854775808.f,	// 2^-63
  1/4611686018427387904.f,	// 2^-62
  1/2305843009213693952.f,	// 2^-61
  1/1152921504606846976.f,	// 2^-60
  1/576460752303423488.f,	// 2^-59
  1/288230376151711744.f,	// 2^-58
  1/144115188075855872.f,	// 2^-57
  1/72057594037927936.f,	// 2^-56
  1/36028797018963968.f,	// 2^-55
  1/18014398509481984.f,	// 2^-54
  1/9007199254740992.f,		// 2^-53
  1/4503599627370496.f,		// 2^-52
  1/2251799813685248.f,		// 2^-51
  1/1125899906842624.f,		// 2^-50
  1/562949953421312.f,		// 2^-49
  1/281474976710656.f,		// 2^-48
  1/140737488355328.f,		// 2^-47
  1/70368744177664.f,		// 2^-46
  1/35184372088832.f,		// 2^-45
  1/17592186044416.f,		// 2^-44
  1/8796093022208.f,		// 2^-43
  1/4398046511104.f,		// 2^-42
  1/2199023255552.f,		// 2^-41
  1/1099511627776.f,		// 2^-40
  1/549755813888.f,		// 2^-39
  1/274877906944.f,		// 2^-38
  1/137438953472.f,		// 2^-37
  1/68719476736.f,		// 2^-36
  1/34359738368.f,		// 2^-35
  1/17179869184.f,		// 2^-34
  1/8589934592.f,		// 2^-33
  1/4294967296.f,		// 2^-32
  1/2147483648.f,		// 2^-31
  1/1073741824.f,		// 2^-30
  1/536870912.f,		// 2^-29
  1/268435456.f,		// 2^-28
  1/134217728.f,		// 2^-27
  1/67108864.f,			// 2^-26
  1/33554432.f,			// 2^-25
  1/16777216.f,			// 2^-24
  1/8388608.f,			// 2^-23
  1/4194304.f,			// 2^-22
  1/2097152.f,			// 2^-21
  1/1048576.f,			// 2^-20
  1/524288.f,			// 2^-19
  1/262144.f,			// 2^-18
  1/131072.f,			// 2^-17
  1/65536.f,			// 2^-16
  1/32768.f,			// 2^-15
  1/16384.f,			// 2^-14
  1/8192.f,			// 2^-13
  1/4096.f,			// 2^-12
  1/2048.f,			// 2^-11
  1/1024.f,			// 2^-10
  1/512.f,			// 2^-9
  1/256.f,			// 2^-8
  1/128.f,			// 2^-7
  1/64.f,			// 2^-6
  1/32.f,			// 2^-5
  1/16.f,			// 2^-4
  1/8.f,			// 2^-3
  1/4.f,			// 2^-2
  1/2.f,			// 2^-1
  1.f,				// 2^0
  2.f,				// 2^1
  4.f,				// 2^2
  8.f,				// 2^3
  16.f,				// 2^4
  32.f,				// 2^5
  64.f,				// 2^6
  128.f,			// 2^7
  256.f,			// 2^8
  512.f,			// 2^9
  1024.f,			// 2^10
  2048.f,			// 2^11
  4096.f,			// 2^12
  8192.f,			// 2^13
  16384.f,			// 2^14
  32768.f,			// 2^15
  65536.f,			// 2^16
  131072.f,			// 2^17
  262144.f,			// 2^18
  524288.f,			// 2^19
  1048576.f,			// 2^20
  2097152.f,			// 2^21
  4194304.f,			// 2^22
  8388608.f,			// 2^23
  16777216.f,			// 2^24
  33554432.f,			// 2^25
  67108864.f,			// 2^26
  134217728.f,			// 2^27
  268435456.f,			// 2^28
  536870912.f,			// 2^29
  1073741824.f,			// 2^30
  2147483648.f,			// 2^31
  4294967296.f,			// 2^32
};
#endif
